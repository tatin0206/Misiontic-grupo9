'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _uuid = require('uuid');

var _uuid2 = _interopRequireDefault(_uuid);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var BulmaCheckList = function (_Component) {
  _inherits(BulmaCheckList, _Component);

  function BulmaCheckList(p) {
    _classCallCheck(this, BulmaCheckList);

    var _this = _possibleConstructorReturn(this, (BulmaCheckList.__proto__ || Object.getPrototypeOf(BulmaCheckList)).call(this, p));

    _this.state = {
      values: new Set(_this.props.values)
    };
    _this.handleChange = _this.handleChange.bind(_this);
    _this.parseOption = _this.parseOption.bind(_this);
    return _this;
  }

  _createClass(BulmaCheckList, [{
    key: 'handleChange',
    value: function handleChange(event) {
      var _this2 = this;

      var value = this.props.type(event.target.value);
      var values = new Set([].concat(_toConsumableArray(this.state.values)));
      if (values.has(value)) {
        values.delete(value);
      } else {
        values.add(value);
      }
      this.setState({ values: values }, function () {
        if (_this2.props.callback) {
          _this2.props.callback(_this2.state);
        }
      });
    }
  }, {
    key: 'parseOption',
    value: function parseOption(op) {
      if ((typeof op === 'undefined' ? 'undefined' : _typeof(op)) === 'object') {
        if (op.hasOwnProperty('label') && op.hasOwnProperty('value')) {
          return _react2.default.createElement(
            'span',
            {
              key: _uuid2.default.v4(),
              className: 'column'
            },
            _react2.default.createElement(
              'label',
              {
                className: 'checkbox'
              },
              _react2.default.createElement('input', {
                type: 'checkbox',
                name: this.props.name,
                value: op.value,
                checked: this.state.values.has(op.value),
                onChange: this.handleChange
              }),
              op.label
            )
          );
        } else if (op.hasOwnProperty('value')) {
          return _react2.default.createElement(
            'span',
            {
              key: _uuid2.default.v4(),
              className: 'column'
            },
            _react2.default.createElement(
              'label',
              {
                className: 'checkbox'
              },
              _react2.default.createElement('input', {
                type: 'checkbox',
                name: this.props.name,
                value: op.value,
                checked: this.state.values.has(op.value),
                onChange: this.handleChange
              }),
              op.value
            )
          );
        }
      } else {
        return _react2.default.createElement(
          'span',
          {
            key: _uuid2.default.v4(),
            className: 'column'
          },
          _react2.default.createElement(
            'label',
            {
              className: 'checkbox'
            },
            _react2.default.createElement('input', {
              type: 'checkbox',
              name: this.props.name,
              value: op,
              checked: this.state.values.has(op),
              onChange: this.handleChange
            }),
            op
          )
        );
      }
    }
  }, {
    key: 'render',
    value: function render() {
      return _react2.default.createElement(
        'p',
        { className: 'control columns is-gapless' },
        this.props.options.map(this.parseOption)
      );
    }
  }]);

  return BulmaCheckList;
}(_react.Component);

exports.default = BulmaCheckList;


BulmaCheckList.defaultProps = {
  values: [],
  options: [],
  type: String
};