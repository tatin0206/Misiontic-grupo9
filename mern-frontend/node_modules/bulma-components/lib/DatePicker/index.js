'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactFlatpickr = require('react-flatpickr');

var _reactFlatpickr2 = _interopRequireDefault(_reactFlatpickr);

var _Icon = require('../Icon');

var _Icon2 = _interopRequireDefault(_Icon);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var BulmaDatePicker = function (_Component) {
  _inherits(BulmaDatePicker, _Component);

  function BulmaDatePicker(p) {
    _classCallCheck(this, BulmaDatePicker);

    var _this = _possibleConstructorReturn(this, (BulmaDatePicker.__proto__ || Object.getPrototypeOf(BulmaDatePicker)).call(this, p));

    _this.state = {
      value: new Date()
    };
    _this.handleChange = _this.handleChange.bind(_this);
    _this.options = _this.options.bind(_this);
    return _this;
  }

  _createClass(BulmaDatePicker, [{
    key: 'handleChange',
    value: function handleChange(array) {
      var _this2 = this;

      this.setState({ value: array[0] }, function () {
        if (_this2.props.callback) {
          _this2.props.callback(_this2.state);
        }
      });
    }
  }, {
    key: 'options',
    value: function options() {
      var options = {};
      if (this.props.hasOwnProperty('min')) {
        options['minDate'] = this.props.min;
      }
      if (this.props.hasOwnProperty('max')) {
        options['maxDate'] = this.props.max;
      }
      if (this.props.hasOwnProperty('locale')) {
        options['locale'] = this.props.locale;
      }
      return options;
    }
  }, {
    key: 'render',
    value: function render() {
      return _react2.default.createElement(
        'p',
        { className: 'control has-icon' },
        _react2.default.createElement(_reactFlatpickr2.default, {
          options: this.options(),
          className: 'input',
          value: this.state.value,
          onChange: this.handleChange
        }),
        _react2.default.createElement(
          _Icon2.default,
          null,
          'calendar'
        )
      );
    }
  }]);

  return BulmaDatePicker;
}(_react.Component);

exports.default = BulmaDatePicker;