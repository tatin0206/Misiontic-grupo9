'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Tile = exports.Column = exports.Columns = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _helpers = require('../helpers');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var BulmaColumns = function (_Component) {
  _inherits(BulmaColumns, _Component);

  function BulmaColumns() {
    _classCallCheck(this, BulmaColumns);

    return _possibleConstructorReturn(this, (BulmaColumns.__proto__ || Object.getPrototypeOf(BulmaColumns)).apply(this, arguments));
  }

  _createClass(BulmaColumns, [{
    key: 'render',
    value: function render() {
      return _react2.default.createElement(
        'div',
        { className: 'columns ' + (this.props.multiline ? 'is-multiline' : '') + ' ' + (this.props.gapless ? 'is-gapless' : '') + ' ' + (this.props.device ? 'is-' + this.proos.device : '') + ' ' + this.props.className },
        this.props.children
      );
    }
  }]);

  return BulmaColumns;
}(_react.Component);

BulmaColumns.defaultProps = {
  multiline: false,
  gapless: false,
  device: undefined,
  className: ''
};

var Columns = BulmaColumns;

var BulmaColumn = function (_Component2) {
  _inherits(BulmaColumn, _Component2);

  function BulmaColumn() {
    _classCallCheck(this, BulmaColumn);

    return _possibleConstructorReturn(this, (BulmaColumn.__proto__ || Object.getPrototypeOf(BulmaColumn)).apply(this, arguments));
  }

  _createClass(BulmaColumn, [{
    key: 'render',
    value: function render() {
      return _react2.default.createElement(
        'div',
        {
          className: 'column ' + (0, _helpers.parseSize)(this.props.size) + ' ' + (0, _helpers.parseSize)(this.props.offset, 'is-offset') + ' ' + this.props.className
        },
        this.props.children
      );
    }
  }]);

  return BulmaColumn;
}(_react.Component);

BulmaColumn.defaultProps = {
  size: '',
  offset: '',
  className: ''
};

var Column = BulmaColumn;

var BulmaTile = function (_Component3) {
  _inherits(BulmaTile, _Component3);

  function BulmaTile() {
    _classCallCheck(this, BulmaTile);

    return _possibleConstructorReturn(this, (BulmaTile.__proto__ || Object.getPrototypeOf(BulmaTile)).apply(this, arguments));
  }

  _createClass(BulmaTile, [{
    key: 'render',
    value: function render() {
      return _react2.default.createElement(
        'div',
        {
          className: 'tile ' + (this.props.vertical ? 'is-vertical' : '') + ' ' + (this.props.ancestor ? 'is-ancestor' : '') + ' ' + (this.props.parent ? 'is-parent' : '') + ' ' + (this.props.child ? 'is-child' : '') + ' ' + (this.props.size ? 'is-' + this.props.size : '') + ' ' + this.props.className
        },
        this.props.children
      );
    }
  }]);

  return BulmaTile;
}(_react.Component);

BulmaTile.defaultProps = {
  className: '',
  vertical: false,
  ancestor: false,
  parent: false,
  child: false,
  size: undefined
};

var Tile = BulmaTile;

exports.Columns = Columns;
exports.Column = Column;
exports.Tile = Tile;